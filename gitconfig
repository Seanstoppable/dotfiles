[color]
    diff = auto
    branch = auto
    status = auto

[url "git@github.com:"]
    insteadOf = https://github.com/

[commit]
    verbose = true

[core]
  excludesfile = ~/.dotfiles/.gitignore
  hooksPath = ~/.dotfiles/git_hooks

[diff]
	compactionHeuristic = true

[fetch]
  prune = true

[rerere]
	enabled = true

[push]
	default = simple

[alias]
  branches = "for-each-ref --sort=-committerdate --format=\"%(color:yellow)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\" refs/remotes refs/local"
  ca = "commit --amend"
  ci = "commit"
  co = "checkout"
  commend = "commit --amend --no-edit"
  cpc = "cherry-pick --continue"
  desc = "describe"
  draft = "!f() { git push origin HEAD:refs/drafts/$1; }; f"
  drop1 = "stash drop stash@{0}"
  editlast = "!vim `git diff-tree --no-commit-id --name-only -r HEAD`"
  editcommit ="!vim `git show --pretty="format:" --name-only -r $1`"
  f = "fetch --all"
  hist = "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
  ignore = "update-index --assume-unchanged"
  unignore = "!git update-index --no-assume-unchanged $1; git reset HEAD $1;  git checkout $1"
  ls = "log --oneline"
  mff = "merge --no-ff"
  nuke = "!git clean -fdx"
  patch = "add --patch"
  stag = "!git tag -s -a"
  submit = "!f() { git push origin HEAD:refs/for/$1; }; f"
  undo = "reset --soft HEAD^"
  change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch -f --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "
