#functions for showing git repo status on the command line

# * uncommitted changes
# ^ stashed changes
# > ahead of origin
# < behind origin
# ↕ diverged from origin
# R rebasing

function parse_project_name() {
  echo `git remote -v | grep origin | head -n1 | awk '{print $2}' | sed 's/.*\///' | sed 's/\.git//'`
}

function is_docker_running() {
  docker info &> /dev/null
  if [[ $? -ne 0 ]]
  then
    echo ""
  else
    echo "D"
  fi
}

function is_zookeeper_running() {
  echo stat | nc localhost 2181 &> /dev/null
  if [[ $? -ne 0 ]]
  then
    echo ""
  else
    echo "Z"
  fi
}

function is_postgres_running() {
  if pgrep postgres > /dev/null
  then
    echo "P"
  else
    echo ""
  fi
}

function is_redis_running() {
  if pgrep redis-server > /dev/null
  then
    echo "R"
  else
    echo ""
  fi
}

function is_mongo_running() {

  if pgrep mongod > /dev/null
  then
    echo  "M"
  else
    echo ""
  fi
}

function parse_git_dirty() {
  regex="working tree clean"
  if [[ $1 =~ $regex ]]
  then
    echo ""
  else
    echo "*"
  fi
}

function parse_git_rebasing() {
  regex="currently rebasing"
  if [[ $1 =~ $regex ]]
  then
    echo "R"
  else
    echo ""
  fi
}

function parse_git_stash() {
  stash=`git stash list 2> /dev/null | wc -l | tr -d ' '`
  [[ $stash != 0 ]] && echo "^$stash"
}

function parse_git_tag() {
  tag=`git describe 2> /dev/null`
  [[ $tag != 0 ]] && echo "$tag"
}


function parse_cherry_picking() {
  regex="You are currently cherry-picking"
  if [[ $1 =~ $regex ]]
  then
    n=${BASH_REMATCH[1]}
    echo "%"
  fi
}

function parse_git_ahead() {
  regex="Your branch is ahead of [a-zA-Z'/_-i0-9]+ by ([0-9]+)"
  if [[ $1 =~ $regex ]]
  then
    n=${BASH_REMATCH[1]}
    echo ">$n"
  fi
}

function parse_git_behind() {
  regex="Your branch is behind [a-zA-Z'/_-i0-9]+ by ([0-9]+)"
  if [[ $1 =~ $regex ]]
  then
    n=${BASH_REMATCH[1]}
    echo "<$n"
  fi
}

function parse_git_diverge() {
  regex="([0-9]+) and ([0-9]+) different commit"
  if [[ $1 =~ $regex ]]
  then
    your=${BASH_REMATCH[1]}
    source=${BASH_REMATCH[2]}
    symbol="↕"
    echo "$your$symbol$source"
  fi
}

function current_git_branch() {
  git rev-parse --abbrev-ref HEAD 2> /dev/null
}

function service_markers {
  docker=`is_docker_running`
  mongo=`is_mongo_running`
  postgres=`is_postgres_running`
  zookeeper=`is_zookeeper_running`
  redis=`is_redis_running`
  values=$docker$mongo$postgres$redis$zookeeper
  if [ -n "$values" ]; then
    echo "[$values]"
  fi
}

function current_git_branch_with_markers {
  current=`current_git_branch`
  if [[ $current ]]
  then
    project=`parse_project_name`
    git_status=`git status 2> /dev/null`
    tag=`parse_git_tag`
    stash=`parse_git_stash`
    ahead=`parse_git_ahead "$git_status"`
    behind=`parse_git_behind "$git_status"`
    diverge=`parse_git_diverge "$git_status"`
    dirty=`parse_git_dirty "$git_status"`
    rebasing=`parse_git_rebasing "$git_status"`
    cherry_picking=`parse_cherry_picking "$git_status"`
    echo $project/$current/$tag | sed -e "s/\(.*\)/\[\1$ahead$behind$diverge$dirty$rebasing$cherry_picking$stash\]/"

  fi
}

function set_prompt {
  local  GREEN='\[\e[0;32m\]'
  local    RED='\[\e[0;31m\]'
  local   CYAN='\[\e[1;36m\]'
  local NORMAL='\[\e[0m\]'

  PS1="\n\h:\W \u $CYAN\$(service_markers)$GREEN\$(current_git_branch_with_markers) $NORMAL\$ "
}

set_prompt
